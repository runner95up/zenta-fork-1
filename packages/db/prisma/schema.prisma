generator client {
    provider = "prisma-client-js"
    // previewFeatures = ["driverAdapters"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String    @unique
    emailVerified DateTime?
    image         String?
    password      String?

    socials UserSocialMedia[]
    role    USER_ROLE         @default(USER)

    createdAt DateTime  @default(now())
    updatedAt DateTime? @updatedAt

    accounts Account[]
    sessions Session[]

    post         Post[]
    likedPost    PostLike[]
    dislikedPost PostDislike[]
    comments     PostComment[]

    techFounderCreatedBy TechFounder[] @relation("techFounderCreatedBy")
    techFounderUpdatedBy TechFounder[] @relation("techFounderUpdatedBy")
    techCreatedBy        Tech[]        @relation("techCreatedBy")
    techUpdatedBy        Tech[]        @relation("techUpdatedBy")
    tagCreateBy          Tag[]         @relation("createBy")
    tagUpdateBy          Tag[]         @relation("updateBy")
}

model Account {
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([provider, providerAccountId])
}

model Session {
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@id([sessionToken])
}

model VerificationToken {
    identifier String
    token      String
    expires    DateTime

    @@id([identifier, token])
}

enum USER_ROLE {
    USER
    ADMIN
}

enum SOCIAL_MEDIA_TYPE {
    GITHUB
    LINKEDIN
    TWITTER
}

model UserSocialMedia {
    id     String            @id @default(uuid())
    userId String
    user   User              @relation(fields: [userId], references: [id], onDelete: Cascade)
    type   SOCIAL_MEDIA_TYPE
    url    String

    createdAt DateTime  @default(now())
    updatedAt DateTime? @updatedAt
}

enum TechFounderType {
    PERSON
    ORGANIZATION
    COMPANY
}

model TechFounder {
    id        String          @id @default(uuid())
    createdBy User?           @relation("techFounderCreatedBy", fields: [creatorId], references: [id], onDelete: Cascade)
    creatorId String?
    updatedBy User?           @relation("techFounderUpdatedBy", fields: [updaterId], references: [id], onDelete: Cascade)
    updaterId String?
    name      String          @unique
    type      TechFounderType @default(PERSON)
    url       String
    photo     String?
    techs     Tech[]
    createdAt DateTime        @default(now())
    updatedAt DateTime?       @updatedAt
}

model TechVersion {
    id          String    @id @default(uuid())
    techId      String
    tech        Tech      @relation(fields: [techId], references: [id], onDelete: Cascade)
    hash        String    @unique
    version     Float
    whatNews    String?
    description String?
    url         String?
    createdAt   DateTime  @default(now())
    updatedAt   DateTime? @updatedAt
}

model Tech {
    id          String        @id @default(uuid())
    createdBy   User?         @relation("techCreatedBy", fields: [creatorId], references: [id], onDelete: Cascade)
    creatorId   String?
    updatedBy   User?         @relation("techUpdatedBy", fields: [updaterId], references: [id], onDelete: Cascade)
    updaterId   String?
    name        String        @unique
    description String
    logo        String
    url         String
    homepage    String?
    founders    TechFounder[]
    versions    TechVersion[]
    heat        Int           @default(0)
    tags        Tag[]
    posts       Post[]
    createdAt   DateTime      @default(now())
    updatedAt   DateTime?     @updatedAt
}

model Tag {
    id          String    @id @default(uuid())
    name        String    @unique
    description String?
    photo       String?
    techs       Tech[]
    posts       Post[]
    heat        Int       @default(0)
    createBy    User?     @relation("createBy", fields: [creatorId], references: [id], onDelete: Cascade)
    creatorId   String?
    updateBy    User?     @relation("updateBy", fields: [updaterId], references: [id], onDelete: Cascade)
    updaterId   String?
    createdAt   DateTime  @default(now())
    updatedAt   DateTime? @updatedAt
}

model Post {
    id        String        @id @default(uuid())
    title     String
    slug      String        @unique
    published Boolean       @default(false)
    cover     String?
    content   Json
    summary   String?
    related   String[]
    authors   User[]
    tags      Tag[]
    stack     Tech[]
    likes     PostLike[]
    dislikes  PostDislike[]
    comments  PostComment[]
    heat      Int           @default(0)
    readTime  Float         @default(0)
    createdAt DateTime      @default(now())
    updatedAt DateTime?     @updatedAt
}

model PostLike {
    id        String    @id @default(uuid())
    postId    String
    post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
    userId    String
    user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt DateTime  @default(now())
    updatedAt DateTime? @updatedAt
}

model PostDislike {
    id     String @id @default(uuid())
    postId String
    post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime  @default(now())
    updatedAt DateTime? @updatedAt
}

model PostComment {
    id        String        @id @default(uuid())
    postId    String
    post      Post          @relation(fields: [postId], references: [id], onDelete: Cascade)
    userId    String
    user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
    content   Json
    parentId  String?
    parent    PostComment?  @relation("ParentComment", fields: [parentId], references: [id])
    children  PostComment[] @relation("ParentComment")
    createdAt DateTime      @default(now())
    updatedAt DateTime?     @updatedAt
}
